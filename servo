#!/usr/bin/env python3

'''
Optune servo (agent) - base protocol handler

Copyright (c) 2018, Opsani
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''

# built-in python packages
import sys
import os
import signal
import time
import argparse
import subprocess
import select
import json
import traceback        # for exception traceback print/capture
import typing
from functools import partial

# 3rd party packages
import requests
import requests.exceptions

DFLT_ADJUST_DRIVER = './adjust'
DFLT_MEASURE_DRIVER = './measure'
DFLT_ENVIRONMENT_DRIVER = './environment'

DFLT_AUTH_FILE = '/run/secrets/optune_auth_token'

DRIVER_EXIT_TIMEOUT = 3 # max time to wait for driver to exit
# max time to wait for driver to send output; this should be more than the max time between progress updates (30sec)
DRIVER_IO_TIMEOUT = os.environ.get("OPTUNE_IO_TIMEOUT", None)
if DRIVER_IO_TIMEOUT:
    DRIVER_IO_TIMEOUT = int(DRIVER_IO_TIMEOUT)

if not DRIVER_IO_TIMEOUT:
    DRIVER_IO_TIMEOUT = None # treat undefined, empty or "0" value as 'infinite'

class CancelDriverException(Exception):
    '''Exception to raise to cancel pending driver operation'''
    pass

class DriverOutputDecodingError(Exception):
    '''Exception indicating that a driver outputted invalid JSON to stdout'''
    pass

class DriverError(Exception):
    """Exception indicating that a driver failed
    """

    def __init__(self, *args, status="failed", reason="unknown"):
        self.status = status
        self.reason = reason
        super().__init__(*args)


def optune_url(account, app_id):
    if args.url:
        return args.url
    # return public cloud service and path
    assert account, 'Optune account is not specified. Use either --account option or OPTUNE_ACCOUNT env var'
    return 'https://api.opsani.com/accounts/{}/applications/{}/servo'.format(account, app_id)

def measure(param):

    print('measuring', param)

    # execute measurement driver and return result
    rsp = run_driver(DFLT_MEASURE_DRIVER, args.app_id, req=param, progress_cb=partial(report_progress, 'MEASUREMENT', time.time()))
    status = rsp.get('status', 'undefined')
    if status != 'ok':
        raise Exception('Measurement driver failed with status "{}" and message "{}"'.format(
            status, rsp.get('message', 'undefined')))
    metrics = rsp.get('metrics', {})
    annotations = rsp.get('annotations', {})

    if not metrics:
        raise Exception('Measurement driver returned no metrics')

    # FIXME: remove this hack for ab->perf
    if 'perf' not in metrics and 'requests throughput' in metrics:
        metrics['perf'] = metrics['requests throughput']    # use rq/sec as perf metric

    print('measured ', metrics)

    ret = dict(metrics=metrics)
    if annotations:
        ret["annotations"] = annotations

    return ret

def adjust(param):

    print('adjusting', param)

    # execute adjustment driver and return result
    rsp = run_driver(DFLT_ADJUST_DRIVER, args.app_id, req=param, progress_cb=partial(report_progress, 'ADJUSTMENT', time.time()))
    status = rsp.get('status', 'undefined')
    if status == 'ok':
        print('adjusted ok')
    else:
        raise DriverError('Adjustment driver failed with status "{}" and message:\n{}'.format(
            status, str(rsp.get('message', 'undefined'))), status=status, reason=rsp.get('reason', 'undefined'))

    return {}

def describe():

    print('describing')

    # collect environment and metrics descriptors
    # FIXME: replace with describe=True when unified
    envd = run_driver(DFLT_ADJUST_DRIVER, args.app_id, describe='--query')
    if envd.get('status', 'ok') != 'ok':
        raise Exception('Adjust driver failed with status "{}" and message "{}"'.format(
            envd.get('status'), envd.get('message')))

    # FIXME: replace with describe=True when unified
    metd = run_driver(DFLT_MEASURE_DRIVER, args.app_id, describe='--describe')
    if metd.get('status', 'ok') != 'ok':
        raise Exception('Measure driver failed with status "{}" and message "{}"'.format(
            metd.get('status'), metd.get('message')))

    # FIXME: remove this hack for ab->perf
    metrics = metd.get('metrics')
    if metrics and 'perf' not in metrics and 'requests throughput' in metrics:
        # use rq/sec as perf metric
        metrics['perf'] = metrics['requests throughput']

    # construct descriptor
    d = dict(
        application=envd.get('application', {}),
        measurement=dict(metrics=metd.get('metrics', {}))
    )  # FIXME: unify response

    # add user-provided settings, if defined
    if OPTUNE_PERF:
       d["optimization"] = { "perf" : OPTUNE_PERF }

    print('DESCRIPTOR:', d)

    return d

def environment(param):
    print('verifying environment', param)
    std_out = subprocess.check_output([DFLT_ENVIRONMENT_DRIVER], input=json.dumps(param).encode("UTF-8"))

    rsp = json.loads(std_out)
    status = rsp.get('status', 'undefined')
    if status == 'ok':
        print('environment ok')
    else:
        raise DriverError(
            'Environment plugin failed with status "{}" and message:\n{}\nresponse: {}'.format(
                status, str(rsp.get('message', 'undefined')), rsp), 
            status=status, reason=rsp.get('reason', 'undefined'))


# --- Helpers -----------------------------------------------------------------


def run_driver(driver, app, req=None, describe=False, progress_cb: typing.Callable[..., None]=None):
    '''
    Execute external driver to perform adjustment or measurement - or just get a descriptor
    Parameters:
        driver : path to driver executable
        app    : application ID to pass to driver
        req    : request input data (descriptor) to submit to driver's stdin (dict)
        describe: bool. If true, requesting a descriptor, not adjust/measure. Req must be None
        progress_cb: callback function to report progress; if it raises exception, try to abort driver's operation
                Callback takes zero or more of the following named parameters (send None or omit to skip):
                - progress: int, 0-100%
                - time_remain: int, seconds
                - message: str, progress/stage message
                - log: list[str], messages to be logged
    '''

    if args.verbose:
        print('DRIVER REQUEST:', driver, req)

    assert not(bool(describe) ^ (req is None)), 'Driver {}: unexpected invocation: describe={}, req={} (exactly one should be used)'.format(driver, describe, req)

    # test only FIXME@@@
    if progress_cb:
        progress_cb(progress=0, message='starting driver')

    # construct command line
    cmd = [driver]
    if describe:
        if isinstance(describe, bool):
            cmd.append('--describe')    #FIXME: candidate for unified driver option name
        else:
            assert isinstance(describe, str)
            cmd.append(describe)    #FIXME: remove hack when driver options are unified
    cmd.append(app)

    # prepare stdin in-memory file if a request is provided
    if req is not None:
        stdin = json.dumps(req).encode("UTF-8")   # input descriptor -> json -> bytes
    else:
        stdin = b''         # no stdin

    info = json.loads(subprocess.check_output([driver, '--info', app]).decode())
    has_cancel = info['has_cancel']

    # execute driver, providing request and capturing stdout/stderr
    proc = subprocess.Popen(cmd, bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    stderr = [] # collect all stderr here
    rsp = {"status": "nodata"} # in case driver outputs nothing at all
    ri = [proc.stdout, proc.stderr]
    wi = [proc.stdin]
    ei = [proc.stdin, proc.stdout, proc.stderr]
    eof_stdout = False
    eof_stderr = False #
    while True:
        if eof_stdout and eof_stderr:
            if proc.poll() is not None: # process exited and no more data
                break
            try:
                proc.wait(DRIVER_EXIT_TIMEOUT) # don't wait forever
            except subprocess.TimeoutExpired:
                print("WARNING: killed stuck child process ({})".format(repr(cmd)), file=sys.stderr)
                proc.kill()
            break
        r, w, e = select.select(ri, wi, ei, DRIVER_IO_TIMEOUT)
        if not r and not w and not e: # timed out
            proc.terminate()
            raise Exception("timed out waiting for child process ({}) output".format(repr(cmd)))
        for h in r:
            if h is proc.stderr:
                l = h.read(4096)
                if not l:
                    eof_stderr = True
                    ri.remove(proc.stderr) # remove from select list (once in EOF, it will always stay 'readable')
                    continue
                stderr.append(l)
            else: # h is proc.stdout
                l = h.readline()
                if not l:
                    eof_stdout = True
                    ri.remove(proc.stdout)
                    continue
                stdout_line = l.strip().decode("UTF-8") # there will always be a complete line, driver writes one line at a time
                if args.verbose:
                    print('DRIVER STDOUT:', stdout_line)
                if not stdout_line:
                    continue # ignore blank lines (shouldn't be output, though)
                try:
                    stdout = json.loads(stdout_line)
                except Exception as e:
                    proc.terminate()
                    raise DriverOutputDecodingError(f"Failed decoding JSON stdout from '{driver}' driver: {stdout_line}") from e
                if "progress" in stdout:
                    if progress_cb:
                        try:
                            progress_cb(progress=stdout["progress"], message=stdout.get("message", None)) # FIXME stage/stageprogress ignored
                        except CancelDriverException:
                            proc.kill(signal.SIGUSR1 if has_cancel else signal.SIGTERM)
                            raise
                else: # should be the last line only (TODO: check only one non-progress line is output)
                    rsp = stdout
        if w:
            l = min(getattr(select, 'PIPE_BUF', 512), len(stdin)) # write with select.PIPE_BUF bytes or less should not block
            if not l: # done sending stdin
                proc.stdin.close()
                wi = []
                ei = [proc.stdout, proc.stderr]
            else:
                proc.stdin.write(stdin[:l])
                stdin = stdin[l:]
        # if e:

    rc = proc.returncode
    if args.verbose or rc != 0:
        print('DRIVER RETURNED:\n---stderr------------------\n{}\n----------------------\n'.format(b"\n".join(stderr).decode("UTF-8")))  # use accumulated stderr

    # (nb: stderr is discarded TODO: consider capturing into annotation, if allowed)
    # err = (b"\n".join(stderr)).decode("UTF-8")
    if args.verbose:
        print('DRIVER RESPONSE:', rsp)
#LK: already printed        if err:
#            print('DRIVER STDERR:', '\n---\n', err, '\n---\n')

    if rc != 0: # error, add verbose info to returned data
        if not rsp.get("status"): # NOTE if driver didn't return any json, status will be "nodata". Preferably, it should print structured data even on failures, so errors can be reported neatly.
            rsp["status"] = "failed"
        m = rsp.get("message", "")
        # if config[report_stderr]:
        rs = os.environ.get("OPTUNE_VERBOSE_STDERR", "all") # FIXME: default setting?
        if rs == "all":
            rsp["message"] = m + "\nstderr:\n" + (b"\n".join(stderr)).decode("UTF-8")
        elif rs == "minimal": # 1st two lines only
            rsp["message"] = m + "\nstderr:\n" + (b"\n".join(stderr[0:2])).decode("UTF-8")
        # else don't send any bit of stderr

    return rsp

def request(event, param, retries=None, backoff=True):
    '''
    Send request to cloud service. Retry if it fails to connect.
    Setting retries to None means retry forever; 0 means no retries, other
    integer value defines the number of retries
    TODO: implement backoff - currently ignored
    '''

    retry_delay = os.environ.get('SERVO_RETRY_DELAY_SEC', 20) # seconds
    if event == 'WHATS_NEXT':
        retry_delay = 1 # quick first-time retry - workaround
    ev = dict(event=event, param=param)
    while True:
        try:
            # TODO: add retries/timeout
            rsp = session.post(optune_url(args.account, args.app_id), json=ev)
            if event == 'DESCRIPTION': session.close() # workaround - close session to let server restart
        except requests.exceptions.ConnectionError as e:
            exc = Exception('Server unavailable for event {} ({}: {}).'.format(event, type(e).__name__, str(e)))
        else:
            # check if server failed with 5xx response: display and set exc
            if not rsp.ok:
                try:
                    rsp_msg = rsp.text
                except Exception as e:
                    rsp_msg = "(unknown: failed to parse: {}: {})".format(type(e).__name__, str(e))
                try:
                    rsp_msg = json.loads(rsp_msg)['message'] # extract salient message if json formatted
                except Exception:
                    pass # leave raw text
                exc = Exception('Server rejected request {} with status {}: {}.'.format(ev, rsp.status_code, rsp_msg))
            else:
                try:
                    rsp_json = rsp.json()
                except Exception as e:
                    try:
                        rsp_msg = rsp.text
                    except Exception as e:
                        rsp_msg = "(unknown: failed to parse: {}: {})".format(type(e).__name__, str(e))
                    exc = Exception('Server response is not valid json: {}.'.format(rsp_msg))
                else:
                    exc = None

        if exc is None:
            break # success, return response

        # retry or fail
        if retries is not None:
            if retries > 0:
                retries -= 1
            else:
                exc = Exception('No more retries left, failed to send {}.'.format(event))
                raise exc

        print(str(exc), 'Waiting {} seconds to retry...\n'.format(retry_delay))
        time.sleep(retry_delay)   # wait for cloud service to recover; TODO add progressive backoff to ~1 minute
        retry_delay = os.environ.get('SERVO_RETRY_DELAY_SEC', 20)  # seconds
        continue

    if args.verbose:
        print("RESPONSE:", rsp.text)
    return rsp_json

def delay():
    if args.interactive:
        print('Press <Enter> to continue...', end='')
        sys.stdout.flush()
        sys.stdin.readline()
    elif args.delay:
        time.sleep(args.delay)
    print()

def exc_format(e):
    if type(e) is Exception:  # if it's just an Exception
        return str(e) # print only the message but not the type
    return "{}: {}".format(type(e).__name__, str(e)) # print the exception type and message

# --- Main --------------------------------------------------------------------

def exec_command():

    ev = ev_param = None
    cmd = request('WHATS_NEXT', None)
    if 'cmd' not in cmd:
        print('Unexpected response: {}'.format(cmd))
        delay()
        return
    c = cmd['cmd']

    if c in {'DESCRIBE', 'MEASURE', 'ADJUST'} and cmd.get('param', {}).get('control', {}).get('environment') is not None:
        try:
            environment(cmd['param'])
        except Exception as e:
            traceback.print_exc()
            # Do not continue execution when environment fails
            ev = 'DESCRIPTION' if c == 'DESCRIBE' else '{}MENT'.format(c)
            ev_param = dict(status='environment-mismatch', message=exc_format(e))
            delay() # nb: in interactive mode, will display prompt and wait for keypress
            request(ev, ev_param)
            return

    if c == 'DESCRIBE':
        p = cmd['param']
        try:
            v = dict(descriptor=describe(), status='ok')
        except Exception as e:
            traceback.print_exc()
            v = dict(status='failed', message=exc_format(e))
        if args.verbose or args.interactive:
            print('DESCRIBE {}: will return {}.'.format(p, v), end=' ')
        ev = 'DESCRIPTION'
        ev_param = v
    elif c == 'MEASURE':
        p = cmd['param']
        try:
            v = measure(p)
        except Exception as e:
            traceback.print_exc()
            v = dict(status='failed', message=exc_format(e))
        if args.verbose or args.interactive:
            print('MEASURE {}: will return {}.'.format(p, v), end=' ')
        ev = 'MEASUREMENT'
        ev_param = v
    elif c == 'ADJUST':
        p = cmd['param']
        try:
            # create a new dict based on p['state'] (with its top level key
            # 'application') which also includes a top-level 'control' key, and
            # pass this to adjust()
            new_dict = p['state'].copy()
            new_dict['control'] = p.get('control', {})
            v = adjust(new_dict)
            if 'state' not in v: # if driver didn't return state, assume it is what was requested
                v['state'] = p['state']
        except DriverError as e:
            traceback.print_exc()
            v = dict(status=e.status, message=exc_format(e))
        except Exception as e:
            traceback.print_exc()
            v = dict(status='failed', message=exc_format(e))
        if args.verbose or args.interactive:
            print('ADJUST to {}: will return {}.'.format(p, v), end=' ')
        ev = 'ADJUSTMENT'
        ev_param = v
    elif c == 'SLEEP':
        p = cmd['param']
        if args.verbose or args.interactive:
            print('SLEEP {} sec.'.format(p), end=' ')
        if not args.interactive: # ignore sleep request when interactive - let user decide
            try:
                duration = int(p['duration'])
            except Exception:
                duration = 120 # seconds
            print('sleeping {} sec.'.format(p))
            time.sleep(duration)
    else:
        raise Exception('unknown command "{}". Ignoring'.format(c))

    delay() # nb: in interactive mode, will display prompt and wait for keypress
    if ev:
        request(ev, ev_param)

def report_progress(operation: str, ts_started: float, progress: int, time_remain: int = None, message: str = None, log: list = None) -> None:
    '''
    Report progress of driver operation
    Parameters:
    (Note that the first two parameters are usually passed as part of a closure, the remainder passed on callback)
        operation: event to send progress with (ADJUSTMENT or MEASUREMENT); if None/'', no progress will be reported
        ts_started: timestamp when operation started
        progress: percent completed [0-100] (if known; None otherwise)
        time_remain: time remaining [seconds] (if known; None otherwise)
        message: message to display (e.g., 'now adjusting compnent XX' or 'measurement: warming up'), or None
        log: list of zero or more strings reporting warnings or otherwise important items to send to cloud engine to log
    Returns nothing
    Raises exception in order to abort the operation (e.g., if told to do so
    by the cloud engine)
    '''
    def set_if(d, k, v):
        '''set dict key to value only if value is not None'''
        if v is not None: d[k] = v

    # skip progress if no operation specified (the protocol requires identifying the operation)
    if not operation:
        return

    # prepare parameters (progress field must be present, even if None)
    param = dict(progress=progress, runtime=int(time.time() - ts_started))
    set_if(param, 'time_remain', time_remain)
    set_if(param, 'message'    , message)
    set_if(param, 'log'        , log)

    # send event (limited retries)
    rsp = request(operation, param, retries=1, backoff=False)
    if rsp.get('status') == 'cancel':
        raise CancelDriverException(rsp.get('reason') or 'API STOP command issued')
    return


def signal_handler(sig_num, unused_frame):
    # restore original signal handler (to prevent reentry)
    signal.signal(sig_num, signal.SIG_DFL)

    # determine signal name (best effort)
    try:
        sig_name = signal.Signals(sig_num).name
    except Exception:
        sig_name = 'signal #{}'.format(sig_num)

    # log signal
    print('\n*** Servo stop requested by signal "{}". Sending GOODBYE to Optune cloud service (may retry 3 times)'.format(sig_name))

    # send GOODBYE event (best effort)
    try:
        request('GOODBYE', dict(reason=sig_name), retries=3, backoff=False)
    except Exception as e:
        print('Warning: failed to send GOODBYE: {}. Exiting anyway'.format(str(e)))

    sys.exit(0) # abort now


def graceful_stop_handler(sig_num, unused_frame):
    """handle signal for graceful termination - simply set a flag to have the main loop exit after the current operation is completed"""
    global stop_flag
    stop_flag = "exit"

def graceful_restart_handler(sig_num, unused_frame):
    """handle signal for restart - simply set a flag to have the main loop exit and restart the process after the current operation is completed"""
    global stop_flag
    stop_flag = "restart"

if __name__ == '__main__':

    # user settings from env variables
    OPTUNE_PERF = os.environ.get("OPTUNE_PERF", None)
    if OPTUNE_PERF: # check that it is a valid Python expression
        try:
            compile(OPTUNE_PERF, "env(OPTUNE_PERF)", "eval")
        except Exception: # catch exception and print only part of the traceback (so we don't show traceback for this file/line, only the string itself)
            import traceback
            s = traceback.format_exc(limit=0)
            print("Error in OPTUNE_PERF environment setting:")
            print("\n".join(s.split("\n")[2:]), file=sys.stderr)
            sys.exit(1)

    stop_flag = None

    # parse command line
    parser = argparse.ArgumentParser(description='Servo for Optune by Opsani')
    parser.add_argument('app_id', help='Application name (id)', default=None)
    parser.add_argument('--interactive', '-i', help='Interactive mode, wait for user prompt on each command', action='store_true')
    parser.add_argument('--delay', '-d', help='Add delay between commands, seconds (ignored in interactive mode)', type=float, default=0.0)
    parser.add_argument('--verbose', '-v', help='Print more info on adjustments and measurements', action='store_true')
    parser.add_argument('--agent', '-a', help='Specify agent name for the servo (similar to http agent)', default='github.com/opsani/servo')
    parser.add_argument('--account', help='Specify account name to override OPTUNE_ACCOUNT env. var', default=os.environ.get('OPTUNE_ACCOUNT'))
    parser.add_argument('--url', help='Specify url to use instead of the default Optune API', default=None)
    parser.add_argument('--auth-token',
                        help='Specify path to a file where the authentication token is stored',
                        default=DFLT_AUTH_FILE)
    parser.add_argument('--no-auth', help='Disable authentication', action='store_true')

    args = parser.parse_args()

    # enforce app_id is provided
    if not args.app_id:
        raise ValueError('app_id parameter is required')

    # intercept SIGINT to provide graceful, traceback-less Ctrl-C/SIGTERM handling
    signal.signal(signal.SIGTERM, signal_handler) # container kill
    signal.signal(signal.SIGINT, signal_handler) # Ctrl-C
    signal.signal(signal.SIGUSR1, graceful_stop_handler)
    signal.signal(signal.SIGHUP, graceful_restart_handler)

    # create requests session so that we can set authentication in one place
    session = requests.Session()

    # setup authentication
    if not args.no_auth:
        print('Loading authentication token from file:', args.auth_token)
        with open(args.auth_token, 'r') as auth_file:
            token = auth_file.read().strip()
        session.headers.update({'Authorization': 'Bearer %s' % token})

    # display mode
    if args.interactive:
        print('Interactive mode: press <Enter> to send each event')

    # announce
    print('Saying HELLO.', end=' ')
    delay()
    request('HELLO', dict(agent=args.agent))

    # run in servo mode
    while not stop_flag:
        try:
            exec_command()
        except Exception as e:
            traceback.print_exc()

    try:
        request('GOODBYE', dict(reason=stop_flag), retries=3, backoff=False)
    except Exception as e:
        print('Warning: failed to send GOODBYE: {}. Exiting anyway'.format(str(e)))

    if stop_flag == "exit":
        sys.exit(0)

    # any other value: restart
    os.execv(sys.argv[0], sys.argv)
